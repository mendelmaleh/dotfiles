#!/bin/bash
# vim: noet

set -eu

_encrypt() {
	age -R "$key".pub -o "$1"
}

_hash() {
	shasum -a 512 "$1" | cut -d' ' -f1
}

# tmpdecrypt takes src and dst paths as args, decrypts and stores the hash.
tmpdecrypt() {
	# don't decrypt readme file
	[ "$1" = "$dir"/README.md ] && return

	age -d -i "$key" -o "$2" "$1"

	hashes[$2]=$(_hash "$2")
}

# tmpencrypt takes src and dst paths as args, compares the hashes and encrypts.
tmpencrypt() {
	# don't encrypt readme file
	[ "$1" = "$dir"/README.md ] && return

	# re-encrypt only if the new hash is different
	[ "$(_hash "$2")" != "${hashes[$2]}" ] && _encrypt "$1" < "$2" || true
}

loop() {
	f=$1
	shift

	for i in "$@"; do
		$f "$i" "${tmpfiles[$i]}"
	done
}

# edit takes a list of files, decrypts them, edits them, re-encrypts them.
edit() {
	tmpdir=$(mktemp -d)
	trap "rm -rf $tmpdir" EXIT

	declare -A tmpfiles
	for i in "$@"; do
		tmpfiles[$i]=$tmpdir/$(basename "$i")
	done

	declare -A hashes
	loop tmpdecrypt "$@"

	vim -o ${tmpfiles[*]}
	loop tmpencrypt "$@"
}

dir=~/todo
key=~/keys/todo
date="$(date +'%Y-%m-%d')"
git="git -C $dir"

# create dir, readme, templates and git repo
if [ ! -d $dir ]; then
	mkdir $dir
	cat <<- 'EOF' > $dir/README.md
	# todo

	created with [https://git.sr.ht/~mendelmaleh/dotfiles/tree/master/bin/oggi].
	inspired by [https://ugmonk.com/blogs/journal/analog-the-simplest-productivity-system].

	# signals

	```markdown
	- todo
	+ done
	```
	EOF

	echo "# next" | _encrypt $dir/next.md
	echo "# someday" | _encrypt $dir/someday.md

	$git init
	$git add $dir
	$git commit -m "Initial commit"
fi

file="$dir/$date.md"

# create encrypted file with template
if [ ! -f "$file" ]; then
	_encrypt "$file" <<- EOF
	# $(date +'%Y-%m-%d (%A/%V)' | tr '[:upper:]' '[:lower:]')

	# today
	EOF

	$git add "$file"
fi
	
# last="$dir/$(ls -c --ignore $date.md $dir | head -1)"

edit "$file" $dir/next.md $dir/someday.md

# save
$git add --update
$git commit -m "$($git status --porcelain | tr -s ' ')"

# git push
